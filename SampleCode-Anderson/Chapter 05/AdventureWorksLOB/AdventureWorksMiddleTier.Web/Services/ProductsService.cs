
namespace AdventureWorksMiddleTier.Web.Services
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Data;
    using System.Linq;
    using AdventureWorksMiddleTier.Web;
    using System.ServiceModel.DomainServices.Hosting;
    using System.ServiceModel.DomainServices.EntityFramework;
    using System.ServiceModel.DomainServices.Server;


    // [RequiresAuthentication]
    [EnableClientAccess()]
    public class ProductsService : LinqToEntitiesDomainService<AdventureWorks2008Entities>
    {
        public IQueryable<Product> GetProducts()
        {
            return this.ObjectContext.Products;
        }

        // This is a custom method added to the code generated by the Domain Service Class Wizard
        // to return a single Product entity to the client
        public Product GetProduct(int productID)
        {
            return ObjectContext.Products
                   .Where(p => p.ProductID == productID)
                   .FirstOrDefault();

            // Another way of doing the same thing
            //return this.ObjectContext.Products.FirstOrDefault(p => p.ProductID == productID);
        }

        public void InsertProduct(Product product)
        {
            if ((product.EntityState != EntityState.Added))
            {
                if ((product.EntityState != EntityState.Detached))
                {
                    this.ObjectContext.ObjectStateManager.ChangeObjectState(product, EntityState.Added);
                }
                else
                {
                    this.ObjectContext.AddToProducts(product);
                }
            }
        }

        public void UpdateProduct(Product currentProduct)
        {
            if ((currentProduct.EntityState == EntityState.Detached))
            {
                this.ObjectContext.Products.AttachAsModified(currentProduct, this.ChangeSet.GetOriginal(currentProduct));
            }
        }

        public void DeleteProduct(Product product)
        {
            if ((product.EntityState == EntityState.Detached))
            {
                this.ObjectContext.Attach(product);
            }
            this.ObjectContext.DeleteObject(product);
        }

        // An example Invoke operation
        public decimal GetExchangeRate(string fromCurrency, string toCurrency)
        {
            throw new NotImplementedException();
            //return ExchangeRates.GetRate(fromCurrency, toCurrency);
        }

        // An example custom operation
        public void DiscontinueProduct(Product product)
        {
            // Logic to discontinue the product...
        }

        protected override void OnError(DomainServiceErrorInfo errorInfo)
        {
            // You can add custom error logging code here if you wish
            base.OnError(errorInfo);
        }
    }
}


